// Code generated by zanzibar
// @generated
// Checksum : QJsxDbQSk795cdcMrxo/xg==
// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package nested_structs

import (
	json "encoding/json"
	fmt "fmt"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructsNestedStructsFirst(in *jlexer.Lexer, out *NestedStructs_First_Result) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			if in.IsNull() {
				in.Skip()
				out.Success = nil
			} else {
				if out.Success == nil {
					out.Success = new(RequiredStruct)
				}
				easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs(in, &*out.Success)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructsNestedStructsFirst(out *jwriter.Writer, in NestedStructs_First_Result) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Success != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"success\":")
		if in.Success == nil {
			out.RawString("null")
		} else {
			easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs(out, *in.Success)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NestedStructs_First_Result) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructsNestedStructsFirst(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NestedStructs_First_Result) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructsNestedStructsFirst(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NestedStructs_First_Result) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructsNestedStructsFirst(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NestedStructs_First_Result) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructsNestedStructsFirst(l, v)
}
func easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs(in *jlexer.Lexer, out *RequiredStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var OneSet bool
	var TwoSet bool
	var ThreeSet bool
	var FourSet bool
	var FiveSet bool
	var SixSet bool
	var SevenSet bool
	var EightSet bool
	var NineSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "one":
			out.One = bool(in.Bool())
			OneSet = true
		case "two":
			out.Two = int8(in.Int8())
			TwoSet = true
		case "three":
			out.Three = int16(in.Int16())
			ThreeSet = true
		case "four":
			out.Four = int32(in.Int32())
			FourSet = true
		case "five":
			out.Five = int64(in.Int64())
			FiveSet = true
		case "six":
			out.Six = float64(in.Float64())
			SixSet = true
		case "seven":
			if in.IsNull() {
				in.Skip()
				out.Seven = nil
			} else {
				out.Seven = in.Bytes()
			}
			SevenSet = true
		case "eight":
			out.Eight = string(in.String())
			EightSet = true
		case "nine":
			if in.IsNull() {
				in.Skip()
				out.Nine = nil
			} else {
				if out.Nine == nil {
					out.Nine = new(RequiredExtra)
				}
				easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs1(in, &*out.Nine)
			}
			NineSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !OneSet {
		in.AddError(fmt.Errorf("key 'one' is required"))
	}
	if !TwoSet {
		in.AddError(fmt.Errorf("key 'two' is required"))
	}
	if !ThreeSet {
		in.AddError(fmt.Errorf("key 'three' is required"))
	}
	if !FourSet {
		in.AddError(fmt.Errorf("key 'four' is required"))
	}
	if !FiveSet {
		in.AddError(fmt.Errorf("key 'five' is required"))
	}
	if !SixSet {
		in.AddError(fmt.Errorf("key 'six' is required"))
	}
	if !SevenSet {
		in.AddError(fmt.Errorf("key 'seven' is required"))
	}
	if !EightSet {
		in.AddError(fmt.Errorf("key 'eight' is required"))
	}
	if !NineSet {
		in.AddError(fmt.Errorf("key 'nine' is required"))
	}
}
func easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs(out *jwriter.Writer, in RequiredStruct) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"one\":")
	out.Bool(bool(in.One))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"two\":")
	out.Int8(int8(in.Two))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"three\":")
	out.Int16(int16(in.Three))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"four\":")
	out.Int32(int32(in.Four))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"five\":")
	out.Int64(int64(in.Five))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"six\":")
	out.Float64(float64(in.Six))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"seven\":")
	out.Base64Bytes(in.Seven)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"eight\":")
	out.String(string(in.Eight))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nine\":")
	if in.Nine == nil {
		out.RawString("null")
	} else {
		easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs1(out, *in.Nine)
	}
	out.RawByte('}')
}
func easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs1(in *jlexer.Lexer, out *RequiredExtra) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var OneSet bool
	var TwoSet bool
	var ThreeSet bool
	var FourSet bool
	var FiveSet bool
	var SixSet bool
	var SevenSet bool
	var EightSet bool
	var NineSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "one":
			if in.IsNull() {
				in.Skip()
				out.One = nil
			} else {
				in.Delim('[')
				if out.One == nil {
					if !in.IsDelim(']') {
						out.One = make([]string, 0, 4)
					} else {
						out.One = []string{}
					}
				} else {
					out.One = (out.One)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.One = append(out.One, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
			OneSet = true
		case "two":
			if in.IsNull() {
				in.Skip()
				out.Two = nil
			} else {
				in.Delim('[')
				if out.Two == nil {
					if !in.IsDelim(']') {
						out.Two = make([]*OptionalTerminal, 0, 8)
					} else {
						out.Two = []*OptionalTerminal{}
					}
				} else {
					out.Two = (out.Two)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *OptionalTerminal
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(OptionalTerminal)
						}
						easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs2(in, &*v5)
					}
					out.Two = append(out.Two, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
			TwoSet = true
		case "three":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Three = make(map[string]struct{})
				} else {
					out.Three = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 struct{}
					easyjson7b33b374Decode(in, &v6)
					(out.Three)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
			ThreeSet = true
		case "four":
			if in.IsNull() {
				in.Skip()
				out.Four = nil
			} else {
				in.Delim('[')
				if out.Four == nil {
					if !in.IsDelim(']') {
						out.Four = make([]*OptionalTerminal, 0, 8)
					} else {
						out.Four = []*OptionalTerminal{}
					}
				} else {
					out.Four = (out.Four)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *OptionalTerminal
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(OptionalTerminal)
						}
						easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs2(in, &*v7)
					}
					out.Four = append(out.Four, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
			FourSet = true
		case "five":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Five = make(map[string]string)
				} else {
					out.Five = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 string
					v8 = string(in.String())
					(out.Five)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
			FiveSet = true
		case "six":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Six = make(map[string]*OptionalTerminal)
				} else {
					out.Six = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 *OptionalTerminal
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(OptionalTerminal)
						}
						easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs2(in, &*v9)
					}
					(out.Six)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
			SixSet = true
		case "seven":
			out.Seven = UUID(in.String())
			SevenSet = true
		case "eight":
			out.Eight = ItemType(in.String())
			EightSet = true
		case "nine":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Nine).UnmarshalJSON(data))
			}
			NineSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !OneSet {
		in.AddError(fmt.Errorf("key 'one' is required"))
	}
	if !TwoSet {
		in.AddError(fmt.Errorf("key 'two' is required"))
	}
	if !ThreeSet {
		in.AddError(fmt.Errorf("key 'three' is required"))
	}
	if !FourSet {
		in.AddError(fmt.Errorf("key 'four' is required"))
	}
	if !FiveSet {
		in.AddError(fmt.Errorf("key 'five' is required"))
	}
	if !SixSet {
		in.AddError(fmt.Errorf("key 'six' is required"))
	}
	if !SevenSet {
		in.AddError(fmt.Errorf("key 'seven' is required"))
	}
	if !EightSet {
		in.AddError(fmt.Errorf("key 'eight' is required"))
	}
	if !NineSet {
		in.AddError(fmt.Errorf("key 'nine' is required"))
	}
}
func easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs1(out *jwriter.Writer, in RequiredExtra) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"one\":")
	if in.One == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v10, v11 := range in.One {
			if v10 > 0 {
				out.RawByte(',')
			}
			out.String(string(v11))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"two\":")
	if in.Two == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v12, v13 := range in.Two {
			if v12 > 0 {
				out.RawByte(',')
			}
			if v13 == nil {
				out.RawString("null")
			} else {
				easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs2(out, *v13)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"three\":")
	if in.Three == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v14First := true
		for v14Name, v14Value := range in.Three {
			if !v14First {
				out.RawByte(',')
			}
			v14First = false
			out.String(string(v14Name))
			out.RawByte(':')
			easyjson7b33b374Encode(out, v14Value)
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"four\":")
	if in.Four == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v15, v16 := range in.Four {
			if v15 > 0 {
				out.RawByte(',')
			}
			if v16 == nil {
				out.RawString("null")
			} else {
				easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs2(out, *v16)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"five\":")
	if in.Five == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v17First := true
		for v17Name, v17Value := range in.Five {
			if !v17First {
				out.RawByte(',')
			}
			v17First = false
			out.String(string(v17Name))
			out.RawByte(':')
			out.String(string(v17Value))
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"six\":")
	if in.Six == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v18First := true
		for v18Name, v18Value := range in.Six {
			if !v18First {
				out.RawByte(',')
			}
			v18First = false
			out.String(string(v18Name))
			out.RawByte(':')
			if v18Value == nil {
				out.RawString("null")
			} else {
				easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs2(out, *v18Value)
			}
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"seven\":")
	out.String(string(in.Seven))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"eight\":")
	out.String(string(in.Eight))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nine\":")
	out.Raw((in.Nine).MarshalJSON())
	out.RawByte('}')
}
func easyjson7b33b374Decode(in *jlexer.Lexer, out *struct{}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b33b374Encode(out *jwriter.Writer, in struct{}) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs2(in *jlexer.Lexer, out *OptionalTerminal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "one":
			if in.IsNull() {
				in.Skip()
				out.One = nil
			} else {
				if out.One == nil {
					out.One = new(bool)
				}
				*out.One = bool(in.Bool())
			}
		case "two":
			if in.IsNull() {
				in.Skip()
				out.Two = nil
			} else {
				if out.Two == nil {
					out.Two = new(int8)
				}
				*out.Two = int8(in.Int8())
			}
		case "three":
			if in.IsNull() {
				in.Skip()
				out.Three = nil
			} else {
				if out.Three == nil {
					out.Three = new(int16)
				}
				*out.Three = int16(in.Int16())
			}
		case "four":
			if in.IsNull() {
				in.Skip()
				out.Four = nil
			} else {
				if out.Four == nil {
					out.Four = new(int32)
				}
				*out.Four = int32(in.Int32())
			}
		case "five":
			if in.IsNull() {
				in.Skip()
				out.Five = nil
			} else {
				if out.Five == nil {
					out.Five = new(int64)
				}
				*out.Five = int64(in.Int64())
			}
		case "six":
			if in.IsNull() {
				in.Skip()
				out.Six = nil
			} else {
				if out.Six == nil {
					out.Six = new(float64)
				}
				*out.Six = float64(in.Float64())
			}
		case "seven":
			if in.IsNull() {
				in.Skip()
				out.Seven = nil
			} else {
				out.Seven = in.Bytes()
			}
		case "eight":
			if in.IsNull() {
				in.Skip()
				out.Eight = nil
			} else {
				if out.Eight == nil {
					out.Eight = new(string)
				}
				*out.Eight = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs2(out *jwriter.Writer, in OptionalTerminal) {
	out.RawByte('{')
	first := true
	_ = first
	if in.One != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"one\":")
		if in.One == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.One))
		}
	}
	if in.Two != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"two\":")
		if in.Two == nil {
			out.RawString("null")
		} else {
			out.Int8(int8(*in.Two))
		}
	}
	if in.Three != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"three\":")
		if in.Three == nil {
			out.RawString("null")
		} else {
			out.Int16(int16(*in.Three))
		}
	}
	if in.Four != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"four\":")
		if in.Four == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.Four))
		}
	}
	if in.Five != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"five\":")
		if in.Five == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.Five))
		}
	}
	if in.Six != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"six\":")
		if in.Six == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Six))
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"seven\":")
	out.Base64Bytes(in.Seven)
	if in.Eight != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"eight\":")
		if in.Eight == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Eight))
		}
	}
	out.RawByte('}')
}
func easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructsNestedStructsFirst1(in *jlexer.Lexer, out *NestedStructs_First_Args) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var OneSet bool
	var TwoSet bool
	var ThreeSet bool
	var FourSet bool
	var FiveSet bool
	var SixSet bool
	var SevenSet bool
	var EightSet bool
	var NineSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "one":
			out.One = bool(in.Bool())
			OneSet = true
		case "two":
			out.Two = int8(in.Int8())
			TwoSet = true
		case "three":
			out.Three = int16(in.Int16())
			ThreeSet = true
		case "four":
			out.Four = int32(in.Int32())
			FourSet = true
		case "five":
			out.Five = int64(in.Int64())
			FiveSet = true
		case "six":
			out.Six = float64(in.Float64())
			SixSet = true
		case "seven":
			if in.IsNull() {
				in.Skip()
				out.Seven = nil
			} else {
				out.Seven = in.Bytes()
			}
			SevenSet = true
		case "eight":
			out.Eight = string(in.String())
			EightSet = true
		case "nine":
			if in.IsNull() {
				in.Skip()
				out.Nine = nil
			} else {
				if out.Nine == nil {
					out.Nine = new(RequiredStruct)
				}
				easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs(in, &*out.Nine)
			}
			NineSet = true
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !OneSet {
		in.AddError(fmt.Errorf("key 'one' is required"))
	}
	if !TwoSet {
		in.AddError(fmt.Errorf("key 'two' is required"))
	}
	if !ThreeSet {
		in.AddError(fmt.Errorf("key 'three' is required"))
	}
	if !FourSet {
		in.AddError(fmt.Errorf("key 'four' is required"))
	}
	if !FiveSet {
		in.AddError(fmt.Errorf("key 'five' is required"))
	}
	if !SixSet {
		in.AddError(fmt.Errorf("key 'six' is required"))
	}
	if !SevenSet {
		in.AddError(fmt.Errorf("key 'seven' is required"))
	}
	if !EightSet {
		in.AddError(fmt.Errorf("key 'eight' is required"))
	}
	if !NineSet {
		in.AddError(fmt.Errorf("key 'nine' is required"))
	}
}
func easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructsNestedStructsFirst1(out *jwriter.Writer, in NestedStructs_First_Args) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"one\":")
	out.Bool(bool(in.One))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"two\":")
	out.Int8(int8(in.Two))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"three\":")
	out.Int16(int16(in.Three))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"four\":")
	out.Int32(int32(in.Four))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"five\":")
	out.Int64(int64(in.Five))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"six\":")
	out.Float64(float64(in.Six))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"seven\":")
	out.Base64Bytes(in.Seven)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"eight\":")
	out.String(string(in.Eight))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nine\":")
	if in.Nine == nil {
		out.RawString("null")
	} else {
		easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructs(out, *in.Nine)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NestedStructs_First_Args) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructsNestedStructsFirst1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NestedStructs_First_Args) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b33b374EncodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructsNestedStructsFirst1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NestedStructs_First_Args) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructsNestedStructsFirst1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NestedStructs_First_Args) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b33b374DecodeGithubComUberZanzibarExamplesExampleGatewayBuildGenCodeClientsNestedStructsNestedStructsNestedStructsFirst1(l, v)
}
