// Code generated by thriftrw v1.3.0
// @generated

package nested_structs

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"math"
	"strconv"
	"strings"
)

type ItemState int32

const (
	ItemStateRequired ItemState = 0
	ItemStateOptional ItemState = 1
)

func (v ItemState) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

func (v *ItemState) FromWire(w wire.Value) error {
	*v = (ItemState)(w.GetI32())
	return nil
}

func (v ItemState) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "REQUIRED"
	case 1:
		return "OPTIONAL"
	}
	return fmt.Sprintf("ItemState(%d)", w)
}

func (v ItemState) Equals(rhs ItemState) bool {
	return v == rhs
}

func (v ItemState) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"REQUIRED\""), nil
	case 1:
		return ([]byte)("\"OPTIONAL\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

func (v *ItemState) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}
	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "ItemState")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "ItemState")
		}
		*v = (ItemState)(x)
		return nil
	case string:
		switch w {
		case "REQUIRED":
			*v = ItemStateRequired
			return nil
		case "OPTIONAL":
			*v = ItemStateOptional
			return nil
		default:
			return fmt.Errorf("unknown enum value %q for %q", w, "ItemState")
		}
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "ItemState")
	}
}

type ItemType string

func (v ItemType) ToWire() (wire.Value, error) {
	x := (string)(v)
	return wire.NewValueString(x), error(nil)
}

func (v ItemType) String() string {
	x := (string)(v)
	return fmt.Sprint(x)
}

func (v *ItemType) FromWire(w wire.Value) error {
	x, err := w.GetString(), error(nil)
	*v = (ItemType)(x)
	return err
}

func (lhs ItemType) Equals(rhs ItemType) bool {
	return (lhs == rhs)
}

type OptionalExtra struct {
	One   []string                     `json:"one"`
	Two   []*OptionalTerminal          `json:"two"`
	Three map[string]struct{}          `json:"three"`
	Four  []*OptionalTerminal          `json:"four"`
	Five  map[string]string            `json:"five"`
	Six   map[string]*OptionalTerminal `json:"six"`
	Seven *UUID                        `json:"seven,omitempty"`
	Eight *ItemType                    `json:"eight,omitempty"`
	Nine  *ItemState                   `json:"nine,omitempty"`
}

type _List_String_ValueList []string

func (v _List_String_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		w, err := wire.NewValueString(x), error(nil)
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_String_ValueList) Size() int {
	return len(v)
}

func (_List_String_ValueList) ValueType() wire.Type {
	return wire.TBinary
}

func (_List_String_ValueList) Close() {
}

type _List_OptionalTerminal_ValueList []*OptionalTerminal

func (v _List_OptionalTerminal_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_OptionalTerminal_ValueList) Size() int {
	return len(v)
}

func (_List_OptionalTerminal_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_OptionalTerminal_ValueList) Close() {
}

type _Set_String_ValueList map[string]struct{}

func (v _Set_String_ValueList) ForEach(f func(wire.Value) error) error {
	for x := range v {
		w, err := wire.NewValueString(x), error(nil)
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _Set_String_ValueList) Size() int {
	return len(v)
}

func (_Set_String_ValueList) ValueType() wire.Type {
	return wire.TBinary
}

func (_Set_String_ValueList) Close() {
}

type _Set_OptionalTerminal_ValueList []*OptionalTerminal

func (v _Set_OptionalTerminal_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		if x == nil {
			return fmt.Errorf("invalid set item: value is nil")
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _Set_OptionalTerminal_ValueList) Size() int {
	return len(v)
}

func (_Set_OptionalTerminal_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_Set_OptionalTerminal_ValueList) Close() {
}

type _Map_String_String_MapItemList map[string]string

func (m _Map_String_String_MapItemList) ForEach(f func(wire.MapItem) error) error {
	for k, v := range m {
		kw, err := wire.NewValueString(k), error(nil)
		if err != nil {
			return err
		}
		vw, err := wire.NewValueString(v), error(nil)
		if err != nil {
			return err
		}
		err = f(wire.MapItem{Key: kw, Value: vw})
		if err != nil {
			return err
		}
	}
	return nil
}

func (m _Map_String_String_MapItemList) Size() int {
	return len(m)
}

func (_Map_String_String_MapItemList) KeyType() wire.Type {
	return wire.TBinary
}

func (_Map_String_String_MapItemList) ValueType() wire.Type {
	return wire.TBinary
}

func (_Map_String_String_MapItemList) Close() {
}

type _Map_String_OptionalTerminal_MapItemList map[string]*OptionalTerminal

func (m _Map_String_OptionalTerminal_MapItemList) ForEach(f func(wire.MapItem) error) error {
	for k, v := range m {
		if v == nil {
			return fmt.Errorf("invalid [%v]: value is nil", k)
		}
		kw, err := wire.NewValueString(k), error(nil)
		if err != nil {
			return err
		}
		vw, err := v.ToWire()
		if err != nil {
			return err
		}
		err = f(wire.MapItem{Key: kw, Value: vw})
		if err != nil {
			return err
		}
	}
	return nil
}

func (m _Map_String_OptionalTerminal_MapItemList) Size() int {
	return len(m)
}

func (_Map_String_OptionalTerminal_MapItemList) KeyType() wire.Type {
	return wire.TBinary
}

func (_Map_String_OptionalTerminal_MapItemList) ValueType() wire.Type {
	return wire.TStruct
}

func (_Map_String_OptionalTerminal_MapItemList) Close() {
}

func (v *OptionalExtra) ToWire() (wire.Value, error) {
	var (
		fields [9]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.One != nil {
		w, err = wire.NewValueList(_List_String_ValueList(v.One)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Two != nil {
		w, err = wire.NewValueList(_List_OptionalTerminal_ValueList(v.Two)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.Three != nil {
		w, err = wire.NewValueSet(_Set_String_ValueList(v.Three)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.Four != nil {
		w, err = wire.NewValueSet(_Set_OptionalTerminal_ValueList(v.Four)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}
	if v.Five != nil {
		w, err = wire.NewValueMap(_Map_String_String_MapItemList(v.Five)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}
	if v.Six != nil {
		w, err = wire.NewValueMap(_Map_String_OptionalTerminal_MapItemList(v.Six)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 6, Value: w}
		i++
	}
	if v.Seven != nil {
		w, err = v.Seven.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 7, Value: w}
		i++
	}
	if v.Eight != nil {
		w, err = v.Eight.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 8, Value: w}
		i++
	}
	if v.Nine != nil {
		w, err = v.Nine.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 9, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _List_String_Read(l wire.ValueList) ([]string, error) {
	if l.ValueType() != wire.TBinary {
		return nil, nil
	}
	o := make([]string, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := x.GetString(), error(nil)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func _OptionalTerminal_Read(w wire.Value) (*OptionalTerminal, error) {
	var v OptionalTerminal
	err := v.FromWire(w)
	return &v, err
}

func _List_OptionalTerminal_Read(l wire.ValueList) ([]*OptionalTerminal, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*OptionalTerminal, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _OptionalTerminal_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func _Set_String_Read(s wire.ValueList) (map[string]struct{}, error) {
	if s.ValueType() != wire.TBinary {
		return nil, nil
	}
	o := make(map[string]struct{}, s.Size())
	err := s.ForEach(func(x wire.Value) error {
		i, err := x.GetString(), error(nil)
		if err != nil {
			return err
		}
		o[i] = struct{}{}
		return nil
	})
	s.Close()
	return o, err
}

func _Set_OptionalTerminal_Read(s wire.ValueList) ([]*OptionalTerminal, error) {
	if s.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make([]*OptionalTerminal, 0, s.Size())
	err := s.ForEach(func(x wire.Value) error {
		i, err := _OptionalTerminal_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	s.Close()
	return o, err
}

func _Map_String_String_Read(m wire.MapItemList) (map[string]string, error) {
	if m.KeyType() != wire.TBinary {
		return nil, nil
	}
	if m.ValueType() != wire.TBinary {
		return nil, nil
	}
	o := make(map[string]string, m.Size())
	err := m.ForEach(func(x wire.MapItem) error {
		k, err := x.Key.GetString(), error(nil)
		if err != nil {
			return err
		}
		v, err := x.Value.GetString(), error(nil)
		if err != nil {
			return err
		}
		o[k] = v
		return nil
	})
	m.Close()
	return o, err
}

func _Map_String_OptionalTerminal_Read(m wire.MapItemList) (map[string]*OptionalTerminal, error) {
	if m.KeyType() != wire.TBinary {
		return nil, nil
	}
	if m.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make(map[string]*OptionalTerminal, m.Size())
	err := m.ForEach(func(x wire.MapItem) error {
		k, err := x.Key.GetString(), error(nil)
		if err != nil {
			return err
		}
		v, err := _OptionalTerminal_Read(x.Value)
		if err != nil {
			return err
		}
		o[k] = v
		return nil
	})
	m.Close()
	return o, err
}

func _UUID_Read(w wire.Value) (UUID, error) {
	var x UUID
	err := x.FromWire(w)
	return x, err
}

func _ItemType_Read(w wire.Value) (ItemType, error) {
	var x ItemType
	err := x.FromWire(w)
	return x, err
}

func _ItemState_Read(w wire.Value) (ItemState, error) {
	var v ItemState
	err := v.FromWire(w)
	return v, err
}

func (v *OptionalExtra) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.One, err = _List_String_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.Two, err = _List_OptionalTerminal_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TSet {
				v.Three, err = _Set_String_Read(field.Value.GetSet())
				if err != nil {
					return err
				}
			}
		case 4:
			if field.Value.Type() == wire.TSet {
				v.Four, err = _Set_OptionalTerminal_Read(field.Value.GetSet())
				if err != nil {
					return err
				}
			}
		case 5:
			if field.Value.Type() == wire.TMap {
				v.Five, err = _Map_String_String_Read(field.Value.GetMap())
				if err != nil {
					return err
				}
			}
		case 6:
			if field.Value.Type() == wire.TMap {
				v.Six, err = _Map_String_OptionalTerminal_Read(field.Value.GetMap())
				if err != nil {
					return err
				}
			}
		case 7:
			if field.Value.Type() == wire.TBinary {
				var x UUID
				x, err = _UUID_Read(field.Value)
				v.Seven = &x
				if err != nil {
					return err
				}
			}
		case 8:
			if field.Value.Type() == wire.TBinary {
				var x ItemType
				x, err = _ItemType_Read(field.Value)
				v.Eight = &x
				if err != nil {
					return err
				}
			}
		case 9:
			if field.Value.Type() == wire.TI32 {
				var x ItemState
				x, err = _ItemState_Read(field.Value)
				v.Nine = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *OptionalExtra) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [9]string
	i := 0
	if v.One != nil {
		fields[i] = fmt.Sprintf("One: %v", v.One)
		i++
	}
	if v.Two != nil {
		fields[i] = fmt.Sprintf("Two: %v", v.Two)
		i++
	}
	if v.Three != nil {
		fields[i] = fmt.Sprintf("Three: %v", v.Three)
		i++
	}
	if v.Four != nil {
		fields[i] = fmt.Sprintf("Four: %v", v.Four)
		i++
	}
	if v.Five != nil {
		fields[i] = fmt.Sprintf("Five: %v", v.Five)
		i++
	}
	if v.Six != nil {
		fields[i] = fmt.Sprintf("Six: %v", v.Six)
		i++
	}
	if v.Seven != nil {
		fields[i] = fmt.Sprintf("Seven: %v", *(v.Seven))
		i++
	}
	if v.Eight != nil {
		fields[i] = fmt.Sprintf("Eight: %v", *(v.Eight))
		i++
	}
	if v.Nine != nil {
		fields[i] = fmt.Sprintf("Nine: %v", *(v.Nine))
		i++
	}
	return fmt.Sprintf("OptionalExtra{%v}", strings.Join(fields[:i], ", "))
}

func _List_String_Equals(lhs, rhs []string) bool {
	if len(lhs) != len(rhs) {
		return false
	}
	for i, lv := range lhs {
		rv := rhs[i]
		if !(lv == rv) {
			return false
		}
	}
	return true
}

func _List_OptionalTerminal_Equals(lhs, rhs []*OptionalTerminal) bool {
	if len(lhs) != len(rhs) {
		return false
	}
	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}
	return true
}

func _Set_String_Equals(lhs, rhs map[string]struct{}) bool {
	if len(lhs) != len(rhs) {
		return false
	}
	for x := range rhs {
		if _, ok := lhs[x]; !ok {
			return false
		}
	}
	return true
}

func _Set_OptionalTerminal_Equals(lhs, rhs []*OptionalTerminal) bool {
	if len(lhs) != len(rhs) {
		return false
	}
	for _, x := range lhs {
		ok := false
		for _, y := range rhs {
			if x.Equals(y) {
				ok = true
				break
			}
		}
		if !ok {
			return false
		}
	}
	return true
}

func _Map_String_String_Equals(lhs, rhs map[string]string) bool {
	if len(lhs) != len(rhs) {
		return false
	}
	for lk, lv := range lhs {
		rv, ok := rhs[lk]
		if !ok {
			return false
		}
		if !(lv == rv) {
			return false
		}
	}
	return true
}

func _Map_String_OptionalTerminal_Equals(lhs, rhs map[string]*OptionalTerminal) bool {
	if len(lhs) != len(rhs) {
		return false
	}
	for lk, lv := range lhs {
		rv, ok := rhs[lk]
		if !ok {
			return false
		}
		if !lv.Equals(rv) {
			return false
		}
	}
	return true
}

func _UUID_EqualsPtr(lhs, rhs *UUID) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _ItemType_EqualsPtr(lhs, rhs *ItemType) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _ItemState_EqualsPtr(lhs, rhs *ItemState) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

func (v *OptionalExtra) Equals(rhs *OptionalExtra) bool {
	if !((v.One == nil && rhs.One == nil) || (v.One != nil && rhs.One != nil && _List_String_Equals(v.One, rhs.One))) {
		return false
	}
	if !((v.Two == nil && rhs.Two == nil) || (v.Two != nil && rhs.Two != nil && _List_OptionalTerminal_Equals(v.Two, rhs.Two))) {
		return false
	}
	if !((v.Three == nil && rhs.Three == nil) || (v.Three != nil && rhs.Three != nil && _Set_String_Equals(v.Three, rhs.Three))) {
		return false
	}
	if !((v.Four == nil && rhs.Four == nil) || (v.Four != nil && rhs.Four != nil && _Set_OptionalTerminal_Equals(v.Four, rhs.Four))) {
		return false
	}
	if !((v.Five == nil && rhs.Five == nil) || (v.Five != nil && rhs.Five != nil && _Map_String_String_Equals(v.Five, rhs.Five))) {
		return false
	}
	if !((v.Six == nil && rhs.Six == nil) || (v.Six != nil && rhs.Six != nil && _Map_String_OptionalTerminal_Equals(v.Six, rhs.Six))) {
		return false
	}
	if !_UUID_EqualsPtr(v.Seven, rhs.Seven) {
		return false
	}
	if !_ItemType_EqualsPtr(v.Eight, rhs.Eight) {
		return false
	}
	if !_ItemState_EqualsPtr(v.Nine, rhs.Nine) {
		return false
	}
	return true
}

type OptionalStruct struct {
	One   *bool          `json:"one,omitempty"`
	Two   *int8          `json:"two,omitempty"`
	Three *int16         `json:"three,omitempty"`
	Four  *int32         `json:"four,omitempty"`
	Five  *int64         `json:"five,omitempty"`
	Six   *float64       `json:"six,omitempty"`
	Seven []byte         `json:"seven"`
	Eight *string        `json:"eight,omitempty"`
	Nine  *OptionalExtra `json:"nine,omitempty"`
}

func (v *OptionalStruct) ToWire() (wire.Value, error) {
	var (
		fields [9]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.One != nil {
		w, err = wire.NewValueBool(*(v.One)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Two != nil {
		w, err = wire.NewValueI8(*(v.Two)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.Three != nil {
		w, err = wire.NewValueI16(*(v.Three)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.Four != nil {
		w, err = wire.NewValueI32(*(v.Four)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}
	if v.Five != nil {
		w, err = wire.NewValueI64(*(v.Five)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}
	if v.Six != nil {
		w, err = wire.NewValueDouble(*(v.Six)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 6, Value: w}
		i++
	}
	if v.Seven != nil {
		w, err = wire.NewValueBinary(v.Seven), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 7, Value: w}
		i++
	}
	if v.Eight != nil {
		w, err = wire.NewValueString(*(v.Eight)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 8, Value: w}
		i++
	}
	if v.Nine != nil {
		w, err = v.Nine.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 9, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _OptionalExtra_Read(w wire.Value) (*OptionalExtra, error) {
	var v OptionalExtra
	err := v.FromWire(w)
	return &v, err
}

func (v *OptionalStruct) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.One = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TI8 {
				var x int8
				x, err = field.Value.GetI8(), error(nil)
				v.Two = &x
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TI16 {
				var x int16
				x, err = field.Value.GetI16(), error(nil)
				v.Three = &x
				if err != nil {
					return err
				}
			}
		case 4:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Four = &x
				if err != nil {
					return err
				}
			}
		case 5:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.Five = &x
				if err != nil {
					return err
				}
			}
		case 6:
			if field.Value.Type() == wire.TDouble {
				var x float64
				x, err = field.Value.GetDouble(), error(nil)
				v.Six = &x
				if err != nil {
					return err
				}
			}
		case 7:
			if field.Value.Type() == wire.TBinary {
				v.Seven, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 8:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Eight = &x
				if err != nil {
					return err
				}
			}
		case 9:
			if field.Value.Type() == wire.TStruct {
				v.Nine, err = _OptionalExtra_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *OptionalStruct) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [9]string
	i := 0
	if v.One != nil {
		fields[i] = fmt.Sprintf("One: %v", *(v.One))
		i++
	}
	if v.Two != nil {
		fields[i] = fmt.Sprintf("Two: %v", *(v.Two))
		i++
	}
	if v.Three != nil {
		fields[i] = fmt.Sprintf("Three: %v", *(v.Three))
		i++
	}
	if v.Four != nil {
		fields[i] = fmt.Sprintf("Four: %v", *(v.Four))
		i++
	}
	if v.Five != nil {
		fields[i] = fmt.Sprintf("Five: %v", *(v.Five))
		i++
	}
	if v.Six != nil {
		fields[i] = fmt.Sprintf("Six: %v", *(v.Six))
		i++
	}
	if v.Seven != nil {
		fields[i] = fmt.Sprintf("Seven: %v", v.Seven)
		i++
	}
	if v.Eight != nil {
		fields[i] = fmt.Sprintf("Eight: %v", *(v.Eight))
		i++
	}
	if v.Nine != nil {
		fields[i] = fmt.Sprintf("Nine: %v", v.Nine)
		i++
	}
	return fmt.Sprintf("OptionalStruct{%v}", strings.Join(fields[:i], ", "))
}

func _Bool_EqualsPtr(lhs, rhs *bool) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _Byte_EqualsPtr(lhs, rhs *int8) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _I16_EqualsPtr(lhs, rhs *int16) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _I32_EqualsPtr(lhs, rhs *int32) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _I64_EqualsPtr(lhs, rhs *int64) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _Double_EqualsPtr(lhs, rhs *float64) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _String_EqualsPtr(lhs, rhs *string) bool {
	if lhs != nil && rhs != nil {
		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func (v *OptionalStruct) Equals(rhs *OptionalStruct) bool {
	if !_Bool_EqualsPtr(v.One, rhs.One) {
		return false
	}
	if !_Byte_EqualsPtr(v.Two, rhs.Two) {
		return false
	}
	if !_I16_EqualsPtr(v.Three, rhs.Three) {
		return false
	}
	if !_I32_EqualsPtr(v.Four, rhs.Four) {
		return false
	}
	if !_I64_EqualsPtr(v.Five, rhs.Five) {
		return false
	}
	if !_Double_EqualsPtr(v.Six, rhs.Six) {
		return false
	}
	if !((v.Seven == nil && rhs.Seven == nil) || (v.Seven != nil && rhs.Seven != nil && bytes.Equal(v.Seven, rhs.Seven))) {
		return false
	}
	if !_String_EqualsPtr(v.Eight, rhs.Eight) {
		return false
	}
	if !((v.Nine == nil && rhs.Nine == nil) || (v.Nine != nil && rhs.Nine != nil && v.Nine.Equals(rhs.Nine))) {
		return false
	}
	return true
}

type OptionalTerminal struct {
	One   *bool    `json:"one,omitempty"`
	Two   *int8    `json:"two,omitempty"`
	Three *int16   `json:"three,omitempty"`
	Four  *int32   `json:"four,omitempty"`
	Five  *int64   `json:"five,omitempty"`
	Six   *float64 `json:"six,omitempty"`
	Seven []byte   `json:"seven"`
	Eight *string  `json:"eight,omitempty"`
}

func (v *OptionalTerminal) ToWire() (wire.Value, error) {
	var (
		fields [8]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.One != nil {
		w, err = wire.NewValueBool(*(v.One)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Two != nil {
		w, err = wire.NewValueI8(*(v.Two)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.Three != nil {
		w, err = wire.NewValueI16(*(v.Three)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.Four != nil {
		w, err = wire.NewValueI32(*(v.Four)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}
	if v.Five != nil {
		w, err = wire.NewValueI64(*(v.Five)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}
	if v.Six != nil {
		w, err = wire.NewValueDouble(*(v.Six)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 6, Value: w}
		i++
	}
	if v.Seven != nil {
		w, err = wire.NewValueBinary(v.Seven), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 7, Value: w}
		i++
	}
	if v.Eight != nil {
		w, err = wire.NewValueString(*(v.Eight)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 8, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *OptionalTerminal) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.One = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TI8 {
				var x int8
				x, err = field.Value.GetI8(), error(nil)
				v.Two = &x
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TI16 {
				var x int16
				x, err = field.Value.GetI16(), error(nil)
				v.Three = &x
				if err != nil {
					return err
				}
			}
		case 4:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Four = &x
				if err != nil {
					return err
				}
			}
		case 5:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.Five = &x
				if err != nil {
					return err
				}
			}
		case 6:
			if field.Value.Type() == wire.TDouble {
				var x float64
				x, err = field.Value.GetDouble(), error(nil)
				v.Six = &x
				if err != nil {
					return err
				}
			}
		case 7:
			if field.Value.Type() == wire.TBinary {
				v.Seven, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 8:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Eight = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *OptionalTerminal) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [8]string
	i := 0
	if v.One != nil {
		fields[i] = fmt.Sprintf("One: %v", *(v.One))
		i++
	}
	if v.Two != nil {
		fields[i] = fmt.Sprintf("Two: %v", *(v.Two))
		i++
	}
	if v.Three != nil {
		fields[i] = fmt.Sprintf("Three: %v", *(v.Three))
		i++
	}
	if v.Four != nil {
		fields[i] = fmt.Sprintf("Four: %v", *(v.Four))
		i++
	}
	if v.Five != nil {
		fields[i] = fmt.Sprintf("Five: %v", *(v.Five))
		i++
	}
	if v.Six != nil {
		fields[i] = fmt.Sprintf("Six: %v", *(v.Six))
		i++
	}
	if v.Seven != nil {
		fields[i] = fmt.Sprintf("Seven: %v", v.Seven)
		i++
	}
	if v.Eight != nil {
		fields[i] = fmt.Sprintf("Eight: %v", *(v.Eight))
		i++
	}
	return fmt.Sprintf("OptionalTerminal{%v}", strings.Join(fields[:i], ", "))
}

func (v *OptionalTerminal) Equals(rhs *OptionalTerminal) bool {
	if !_Bool_EqualsPtr(v.One, rhs.One) {
		return false
	}
	if !_Byte_EqualsPtr(v.Two, rhs.Two) {
		return false
	}
	if !_I16_EqualsPtr(v.Three, rhs.Three) {
		return false
	}
	if !_I32_EqualsPtr(v.Four, rhs.Four) {
		return false
	}
	if !_I64_EqualsPtr(v.Five, rhs.Five) {
		return false
	}
	if !_Double_EqualsPtr(v.Six, rhs.Six) {
		return false
	}
	if !((v.Seven == nil && rhs.Seven == nil) || (v.Seven != nil && rhs.Seven != nil && bytes.Equal(v.Seven, rhs.Seven))) {
		return false
	}
	if !_String_EqualsPtr(v.Eight, rhs.Eight) {
		return false
	}
	return true
}

type RequiredExtra struct {
	One   []string                     `json:"one,required"`
	Two   []*OptionalTerminal          `json:"two,required"`
	Three map[string]struct{}          `json:"three,required"`
	Four  []*OptionalTerminal          `json:"four,required"`
	Five  map[string]string            `json:"five,required"`
	Six   map[string]*OptionalTerminal `json:"six,required"`
	Seven UUID                         `json:"seven,required"`
	Eight ItemType                     `json:"eight,required"`
	Nine  ItemState                    `json:"nine,required"`
}

func (v *RequiredExtra) ToWire() (wire.Value, error) {
	var (
		fields [9]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.One == nil {
		return w, errors.New("field One of RequiredExtra is required")
	}
	w, err = wire.NewValueList(_List_String_ValueList(v.One)), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.Two == nil {
		return w, errors.New("field Two of RequiredExtra is required")
	}
	w, err = wire.NewValueList(_List_OptionalTerminal_ValueList(v.Two)), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++
	if v.Three == nil {
		return w, errors.New("field Three of RequiredExtra is required")
	}
	w, err = wire.NewValueSet(_Set_String_ValueList(v.Three)), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 3, Value: w}
	i++
	if v.Four == nil {
		return w, errors.New("field Four of RequiredExtra is required")
	}
	w, err = wire.NewValueSet(_Set_OptionalTerminal_ValueList(v.Four)), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 4, Value: w}
	i++
	if v.Five == nil {
		return w, errors.New("field Five of RequiredExtra is required")
	}
	w, err = wire.NewValueMap(_Map_String_String_MapItemList(v.Five)), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 5, Value: w}
	i++
	if v.Six == nil {
		return w, errors.New("field Six of RequiredExtra is required")
	}
	w, err = wire.NewValueMap(_Map_String_OptionalTerminal_MapItemList(v.Six)), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 6, Value: w}
	i++
	w, err = v.Seven.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 7, Value: w}
	i++
	w, err = v.Eight.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 8, Value: w}
	i++
	w, err = v.Nine.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 9, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *RequiredExtra) FromWire(w wire.Value) error {
	var err error
	oneIsSet := false
	twoIsSet := false
	threeIsSet := false
	fourIsSet := false
	fiveIsSet := false
	sixIsSet := false
	sevenIsSet := false
	eightIsSet := false
	nineIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.One, err = _List_String_Read(field.Value.GetList())
				if err != nil {
					return err
				}
				oneIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.Two, err = _List_OptionalTerminal_Read(field.Value.GetList())
				if err != nil {
					return err
				}
				twoIsSet = true
			}
		case 3:
			if field.Value.Type() == wire.TSet {
				v.Three, err = _Set_String_Read(field.Value.GetSet())
				if err != nil {
					return err
				}
				threeIsSet = true
			}
		case 4:
			if field.Value.Type() == wire.TSet {
				v.Four, err = _Set_OptionalTerminal_Read(field.Value.GetSet())
				if err != nil {
					return err
				}
				fourIsSet = true
			}
		case 5:
			if field.Value.Type() == wire.TMap {
				v.Five, err = _Map_String_String_Read(field.Value.GetMap())
				if err != nil {
					return err
				}
				fiveIsSet = true
			}
		case 6:
			if field.Value.Type() == wire.TMap {
				v.Six, err = _Map_String_OptionalTerminal_Read(field.Value.GetMap())
				if err != nil {
					return err
				}
				sixIsSet = true
			}
		case 7:
			if field.Value.Type() == wire.TBinary {
				v.Seven, err = _UUID_Read(field.Value)
				if err != nil {
					return err
				}
				sevenIsSet = true
			}
		case 8:
			if field.Value.Type() == wire.TBinary {
				v.Eight, err = _ItemType_Read(field.Value)
				if err != nil {
					return err
				}
				eightIsSet = true
			}
		case 9:
			if field.Value.Type() == wire.TI32 {
				v.Nine, err = _ItemState_Read(field.Value)
				if err != nil {
					return err
				}
				nineIsSet = true
			}
		}
	}
	if !oneIsSet {
		return errors.New("field One of RequiredExtra is required")
	}
	if !twoIsSet {
		return errors.New("field Two of RequiredExtra is required")
	}
	if !threeIsSet {
		return errors.New("field Three of RequiredExtra is required")
	}
	if !fourIsSet {
		return errors.New("field Four of RequiredExtra is required")
	}
	if !fiveIsSet {
		return errors.New("field Five of RequiredExtra is required")
	}
	if !sixIsSet {
		return errors.New("field Six of RequiredExtra is required")
	}
	if !sevenIsSet {
		return errors.New("field Seven of RequiredExtra is required")
	}
	if !eightIsSet {
		return errors.New("field Eight of RequiredExtra is required")
	}
	if !nineIsSet {
		return errors.New("field Nine of RequiredExtra is required")
	}
	return nil
}

func (v *RequiredExtra) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [9]string
	i := 0
	fields[i] = fmt.Sprintf("One: %v", v.One)
	i++
	fields[i] = fmt.Sprintf("Two: %v", v.Two)
	i++
	fields[i] = fmt.Sprintf("Three: %v", v.Three)
	i++
	fields[i] = fmt.Sprintf("Four: %v", v.Four)
	i++
	fields[i] = fmt.Sprintf("Five: %v", v.Five)
	i++
	fields[i] = fmt.Sprintf("Six: %v", v.Six)
	i++
	fields[i] = fmt.Sprintf("Seven: %v", v.Seven)
	i++
	fields[i] = fmt.Sprintf("Eight: %v", v.Eight)
	i++
	fields[i] = fmt.Sprintf("Nine: %v", v.Nine)
	i++
	return fmt.Sprintf("RequiredExtra{%v}", strings.Join(fields[:i], ", "))
}

func (v *RequiredExtra) Equals(rhs *RequiredExtra) bool {
	if !_List_String_Equals(v.One, rhs.One) {
		return false
	}
	if !_List_OptionalTerminal_Equals(v.Two, rhs.Two) {
		return false
	}
	if !_Set_String_Equals(v.Three, rhs.Three) {
		return false
	}
	if !_Set_OptionalTerminal_Equals(v.Four, rhs.Four) {
		return false
	}
	if !_Map_String_String_Equals(v.Five, rhs.Five) {
		return false
	}
	if !_Map_String_OptionalTerminal_Equals(v.Six, rhs.Six) {
		return false
	}
	if !(v.Seven == rhs.Seven) {
		return false
	}
	if !(v.Eight == rhs.Eight) {
		return false
	}
	if !v.Nine.Equals(rhs.Nine) {
		return false
	}
	return true
}

type RequiredStruct struct {
	One   bool           `json:"one,required"`
	Two   int8           `json:"two,required"`
	Three int16          `json:"three,required"`
	Four  int32          `json:"four,required"`
	Five  int64          `json:"five,required"`
	Six   float64        `json:"six,required"`
	Seven []byte         `json:"seven,required"`
	Eight string         `json:"eight,required"`
	Nine  *RequiredExtra `json:"nine,required"`
}

func (v *RequiredStruct) ToWire() (wire.Value, error) {
	var (
		fields [9]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueBool(v.One), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	w, err = wire.NewValueI8(v.Two), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++
	w, err = wire.NewValueI16(v.Three), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 3, Value: w}
	i++
	w, err = wire.NewValueI32(v.Four), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 4, Value: w}
	i++
	w, err = wire.NewValueI64(v.Five), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 5, Value: w}
	i++
	w, err = wire.NewValueDouble(v.Six), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 6, Value: w}
	i++
	if v.Seven == nil {
		return w, errors.New("field Seven of RequiredStruct is required")
	}
	w, err = wire.NewValueBinary(v.Seven), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 7, Value: w}
	i++
	w, err = wire.NewValueString(v.Eight), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 8, Value: w}
	i++
	if v.Nine == nil {
		return w, errors.New("field Nine of RequiredStruct is required")
	}
	w, err = v.Nine.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 9, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _RequiredExtra_Read(w wire.Value) (*RequiredExtra, error) {
	var v RequiredExtra
	err := v.FromWire(w)
	return &v, err
}

func (v *RequiredStruct) FromWire(w wire.Value) error {
	var err error
	oneIsSet := false
	twoIsSet := false
	threeIsSet := false
	fourIsSet := false
	fiveIsSet := false
	sixIsSet := false
	sevenIsSet := false
	eightIsSet := false
	nineIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				v.One, err = field.Value.GetBool(), error(nil)
				if err != nil {
					return err
				}
				oneIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TI8 {
				v.Two, err = field.Value.GetI8(), error(nil)
				if err != nil {
					return err
				}
				twoIsSet = true
			}
		case 3:
			if field.Value.Type() == wire.TI16 {
				v.Three, err = field.Value.GetI16(), error(nil)
				if err != nil {
					return err
				}
				threeIsSet = true
			}
		case 4:
			if field.Value.Type() == wire.TI32 {
				v.Four, err = field.Value.GetI32(), error(nil)
				if err != nil {
					return err
				}
				fourIsSet = true
			}
		case 5:
			if field.Value.Type() == wire.TI64 {
				v.Five, err = field.Value.GetI64(), error(nil)
				if err != nil {
					return err
				}
				fiveIsSet = true
			}
		case 6:
			if field.Value.Type() == wire.TDouble {
				v.Six, err = field.Value.GetDouble(), error(nil)
				if err != nil {
					return err
				}
				sixIsSet = true
			}
		case 7:
			if field.Value.Type() == wire.TBinary {
				v.Seven, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
				sevenIsSet = true
			}
		case 8:
			if field.Value.Type() == wire.TBinary {
				v.Eight, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				eightIsSet = true
			}
		case 9:
			if field.Value.Type() == wire.TStruct {
				v.Nine, err = _RequiredExtra_Read(field.Value)
				if err != nil {
					return err
				}
				nineIsSet = true
			}
		}
	}
	if !oneIsSet {
		return errors.New("field One of RequiredStruct is required")
	}
	if !twoIsSet {
		return errors.New("field Two of RequiredStruct is required")
	}
	if !threeIsSet {
		return errors.New("field Three of RequiredStruct is required")
	}
	if !fourIsSet {
		return errors.New("field Four of RequiredStruct is required")
	}
	if !fiveIsSet {
		return errors.New("field Five of RequiredStruct is required")
	}
	if !sixIsSet {
		return errors.New("field Six of RequiredStruct is required")
	}
	if !sevenIsSet {
		return errors.New("field Seven of RequiredStruct is required")
	}
	if !eightIsSet {
		return errors.New("field Eight of RequiredStruct is required")
	}
	if !nineIsSet {
		return errors.New("field Nine of RequiredStruct is required")
	}
	return nil
}

func (v *RequiredStruct) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [9]string
	i := 0
	fields[i] = fmt.Sprintf("One: %v", v.One)
	i++
	fields[i] = fmt.Sprintf("Two: %v", v.Two)
	i++
	fields[i] = fmt.Sprintf("Three: %v", v.Three)
	i++
	fields[i] = fmt.Sprintf("Four: %v", v.Four)
	i++
	fields[i] = fmt.Sprintf("Five: %v", v.Five)
	i++
	fields[i] = fmt.Sprintf("Six: %v", v.Six)
	i++
	fields[i] = fmt.Sprintf("Seven: %v", v.Seven)
	i++
	fields[i] = fmt.Sprintf("Eight: %v", v.Eight)
	i++
	fields[i] = fmt.Sprintf("Nine: %v", v.Nine)
	i++
	return fmt.Sprintf("RequiredStruct{%v}", strings.Join(fields[:i], ", "))
}

func (v *RequiredStruct) Equals(rhs *RequiredStruct) bool {
	if !(v.One == rhs.One) {
		return false
	}
	if !(v.Two == rhs.Two) {
		return false
	}
	if !(v.Three == rhs.Three) {
		return false
	}
	if !(v.Four == rhs.Four) {
		return false
	}
	if !(v.Five == rhs.Five) {
		return false
	}
	if !(v.Six == rhs.Six) {
		return false
	}
	if !bytes.Equal(v.Seven, rhs.Seven) {
		return false
	}
	if !(v.Eight == rhs.Eight) {
		return false
	}
	if !v.Nine.Equals(rhs.Nine) {
		return false
	}
	return true
}

type UUID string

func (v UUID) ToWire() (wire.Value, error) {
	x := (string)(v)
	return wire.NewValueString(x), error(nil)
}

func (v UUID) String() string {
	x := (string)(v)
	return fmt.Sprint(x)
}

func (v *UUID) FromWire(w wire.Value) error {
	x, err := w.GetString(), error(nil)
	*v = (UUID)(x)
	return err
}

func (lhs UUID) Equals(rhs UUID) bool {
	return (lhs == rhs)
}
