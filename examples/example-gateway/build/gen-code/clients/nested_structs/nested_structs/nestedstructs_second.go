// Code generated by thriftrw v1.3.0
// @generated

package nested_structs

import (
	"bytes"
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type NestedStructs_Second_Args struct {
	One   *bool           `json:"one,omitempty"`
	Two   *int8           `json:"two,omitempty"`
	Three *int16          `json:"three,omitempty"`
	Four  *int32          `json:"four,omitempty"`
	Five  *int64          `json:"five,omitempty"`
	Six   *float64        `json:"six,omitempty"`
	Seven []byte          `json:"seven"`
	Eight *string         `json:"eight,omitempty"`
	Nine  *OptionalStruct `json:"nine,omitempty"`
}

func (v *NestedStructs_Second_Args) ToWire() (wire.Value, error) {
	var (
		fields [9]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.One != nil {
		w, err = wire.NewValueBool(*(v.One)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Two != nil {
		w, err = wire.NewValueI8(*(v.Two)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.Three != nil {
		w, err = wire.NewValueI16(*(v.Three)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}
	if v.Four != nil {
		w, err = wire.NewValueI32(*(v.Four)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 4, Value: w}
		i++
	}
	if v.Five != nil {
		w, err = wire.NewValueI64(*(v.Five)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 5, Value: w}
		i++
	}
	if v.Six != nil {
		w, err = wire.NewValueDouble(*(v.Six)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 6, Value: w}
		i++
	}
	if v.Seven != nil {
		w, err = wire.NewValueBinary(v.Seven), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 7, Value: w}
		i++
	}
	if v.Eight != nil {
		w, err = wire.NewValueString(*(v.Eight)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 8, Value: w}
		i++
	}
	if v.Nine != nil {
		w, err = v.Nine.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 9, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _OptionalStruct_Read(w wire.Value) (*OptionalStruct, error) {
	var v OptionalStruct
	err := v.FromWire(w)
	return &v, err
}

func (v *NestedStructs_Second_Args) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				var x bool
				x, err = field.Value.GetBool(), error(nil)
				v.One = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TI8 {
				var x int8
				x, err = field.Value.GetI8(), error(nil)
				v.Two = &x
				if err != nil {
					return err
				}
			}
		case 3:
			if field.Value.Type() == wire.TI16 {
				var x int16
				x, err = field.Value.GetI16(), error(nil)
				v.Three = &x
				if err != nil {
					return err
				}
			}
		case 4:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Four = &x
				if err != nil {
					return err
				}
			}
		case 5:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.Five = &x
				if err != nil {
					return err
				}
			}
		case 6:
			if field.Value.Type() == wire.TDouble {
				var x float64
				x, err = field.Value.GetDouble(), error(nil)
				v.Six = &x
				if err != nil {
					return err
				}
			}
		case 7:
			if field.Value.Type() == wire.TBinary {
				v.Seven, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 8:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Eight = &x
				if err != nil {
					return err
				}
			}
		case 9:
			if field.Value.Type() == wire.TStruct {
				v.Nine, err = _OptionalStruct_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *NestedStructs_Second_Args) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [9]string
	i := 0
	if v.One != nil {
		fields[i] = fmt.Sprintf("One: %v", *(v.One))
		i++
	}
	if v.Two != nil {
		fields[i] = fmt.Sprintf("Two: %v", *(v.Two))
		i++
	}
	if v.Three != nil {
		fields[i] = fmt.Sprintf("Three: %v", *(v.Three))
		i++
	}
	if v.Four != nil {
		fields[i] = fmt.Sprintf("Four: %v", *(v.Four))
		i++
	}
	if v.Five != nil {
		fields[i] = fmt.Sprintf("Five: %v", *(v.Five))
		i++
	}
	if v.Six != nil {
		fields[i] = fmt.Sprintf("Six: %v", *(v.Six))
		i++
	}
	if v.Seven != nil {
		fields[i] = fmt.Sprintf("Seven: %v", v.Seven)
		i++
	}
	if v.Eight != nil {
		fields[i] = fmt.Sprintf("Eight: %v", *(v.Eight))
		i++
	}
	if v.Nine != nil {
		fields[i] = fmt.Sprintf("Nine: %v", v.Nine)
		i++
	}
	return fmt.Sprintf("NestedStructs_Second_Args{%v}", strings.Join(fields[:i], ", "))
}

func (v *NestedStructs_Second_Args) Equals(rhs *NestedStructs_Second_Args) bool {
	if !_Bool_EqualsPtr(v.One, rhs.One) {
		return false
	}
	if !_Byte_EqualsPtr(v.Two, rhs.Two) {
		return false
	}
	if !_I16_EqualsPtr(v.Three, rhs.Three) {
		return false
	}
	if !_I32_EqualsPtr(v.Four, rhs.Four) {
		return false
	}
	if !_I64_EqualsPtr(v.Five, rhs.Five) {
		return false
	}
	if !_Double_EqualsPtr(v.Six, rhs.Six) {
		return false
	}
	if !((v.Seven == nil && rhs.Seven == nil) || (v.Seven != nil && rhs.Seven != nil && bytes.Equal(v.Seven, rhs.Seven))) {
		return false
	}
	if !_String_EqualsPtr(v.Eight, rhs.Eight) {
		return false
	}
	if !((v.Nine == nil && rhs.Nine == nil) || (v.Nine != nil && rhs.Nine != nil && v.Nine.Equals(rhs.Nine))) {
		return false
	}
	return true
}

func (v *NestedStructs_Second_Args) MethodName() string {
	return "second"
}

func (v *NestedStructs_Second_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

var NestedStructs_Second_Helper = struct {
	Args           func(one *bool, two *int8, three *int16, four *int32, five *int64, six *float64, seven []byte, eight *string, nine *OptionalStruct) *NestedStructs_Second_Args
	IsException    func(error) bool
	WrapResponse   func(*OptionalStruct, error) (*NestedStructs_Second_Result, error)
	UnwrapResponse func(*NestedStructs_Second_Result) (*OptionalStruct, error)
}{}

func init() {
	NestedStructs_Second_Helper.Args = func(one *bool, two *int8, three *int16, four *int32, five *int64, six *float64, seven []byte, eight *string, nine *OptionalStruct) *NestedStructs_Second_Args {
		return &NestedStructs_Second_Args{One: one, Two: two, Three: three, Four: four, Five: five, Six: six, Seven: seven, Eight: eight, Nine: nine}
	}
	NestedStructs_Second_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	NestedStructs_Second_Helper.WrapResponse = func(success *OptionalStruct, err error) (*NestedStructs_Second_Result, error) {
		if err == nil {
			return &NestedStructs_Second_Result{Success: success}, nil
		}
		return nil, err
	}
	NestedStructs_Second_Helper.UnwrapResponse = func(result *NestedStructs_Second_Result) (success *OptionalStruct, err error) {
		if result.Success != nil {
			success = result.Success
			return
		}
		err = errors.New("expected a non-void result")
		return
	}
}

type NestedStructs_Second_Result struct {
	Success *OptionalStruct `json:"success,omitempty"`
}

func (v *NestedStructs_Second_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if i != 1 {
		return wire.Value{}, fmt.Errorf("NestedStructs_Second_Result should have exactly one field: got %v fields", i)
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *NestedStructs_Second_Result) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _OptionalStruct_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("NestedStructs_Second_Result should have exactly one field: got %v fields", count)
	}
	return nil
}

func (v *NestedStructs_Second_Result) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}
	return fmt.Sprintf("NestedStructs_Second_Result{%v}", strings.Join(fields[:i], ", "))
}

func (v *NestedStructs_Second_Result) Equals(rhs *NestedStructs_Second_Result) bool {
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && v.Success.Equals(rhs.Success))) {
		return false
	}
	return true
}

func (v *NestedStructs_Second_Result) MethodName() string {
	return "second"
}

func (v *NestedStructs_Second_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
