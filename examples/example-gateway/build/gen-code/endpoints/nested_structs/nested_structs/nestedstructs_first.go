// Code generated by thriftrw v1.3.0
// @generated

package nested_structs

import (
	"bytes"
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type NestedStructs_First_Args struct {
	One   bool            `json:"one,required"`
	Two   int8            `json:"two,required"`
	Three int16           `json:"three,required"`
	Four  int32           `json:"four,required"`
	Five  int64           `json:"five,required"`
	Six   float64         `json:"six,required"`
	Seven []byte          `json:"seven,required"`
	Eight string          `json:"eight,required"`
	Nine  *RequiredStruct `json:"nine,required"`
}

func (v *NestedStructs_First_Args) ToWire() (wire.Value, error) {
	var (
		fields [9]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueBool(v.One), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	w, err = wire.NewValueI8(v.Two), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++
	w, err = wire.NewValueI16(v.Three), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 3, Value: w}
	i++
	w, err = wire.NewValueI32(v.Four), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 4, Value: w}
	i++
	w, err = wire.NewValueI64(v.Five), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 5, Value: w}
	i++
	w, err = wire.NewValueDouble(v.Six), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 6, Value: w}
	i++
	if v.Seven == nil {
		return w, errors.New("field Seven of NestedStructs_First_Args is required")
	}
	w, err = wire.NewValueBinary(v.Seven), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 7, Value: w}
	i++
	w, err = wire.NewValueString(v.Eight), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 8, Value: w}
	i++
	if v.Nine == nil {
		return w, errors.New("field Nine of NestedStructs_First_Args is required")
	}
	w, err = v.Nine.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 9, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _RequiredStruct_Read(w wire.Value) (*RequiredStruct, error) {
	var v RequiredStruct
	err := v.FromWire(w)
	return &v, err
}

func (v *NestedStructs_First_Args) FromWire(w wire.Value) error {
	var err error
	oneIsSet := false
	twoIsSet := false
	threeIsSet := false
	fourIsSet := false
	fiveIsSet := false
	sixIsSet := false
	sevenIsSet := false
	eightIsSet := false
	nineIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				v.One, err = field.Value.GetBool(), error(nil)
				if err != nil {
					return err
				}
				oneIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TI8 {
				v.Two, err = field.Value.GetI8(), error(nil)
				if err != nil {
					return err
				}
				twoIsSet = true
			}
		case 3:
			if field.Value.Type() == wire.TI16 {
				v.Three, err = field.Value.GetI16(), error(nil)
				if err != nil {
					return err
				}
				threeIsSet = true
			}
		case 4:
			if field.Value.Type() == wire.TI32 {
				v.Four, err = field.Value.GetI32(), error(nil)
				if err != nil {
					return err
				}
				fourIsSet = true
			}
		case 5:
			if field.Value.Type() == wire.TI64 {
				v.Five, err = field.Value.GetI64(), error(nil)
				if err != nil {
					return err
				}
				fiveIsSet = true
			}
		case 6:
			if field.Value.Type() == wire.TDouble {
				v.Six, err = field.Value.GetDouble(), error(nil)
				if err != nil {
					return err
				}
				sixIsSet = true
			}
		case 7:
			if field.Value.Type() == wire.TBinary {
				v.Seven, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
				sevenIsSet = true
			}
		case 8:
			if field.Value.Type() == wire.TBinary {
				v.Eight, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				eightIsSet = true
			}
		case 9:
			if field.Value.Type() == wire.TStruct {
				v.Nine, err = _RequiredStruct_Read(field.Value)
				if err != nil {
					return err
				}
				nineIsSet = true
			}
		}
	}
	if !oneIsSet {
		return errors.New("field One of NestedStructs_First_Args is required")
	}
	if !twoIsSet {
		return errors.New("field Two of NestedStructs_First_Args is required")
	}
	if !threeIsSet {
		return errors.New("field Three of NestedStructs_First_Args is required")
	}
	if !fourIsSet {
		return errors.New("field Four of NestedStructs_First_Args is required")
	}
	if !fiveIsSet {
		return errors.New("field Five of NestedStructs_First_Args is required")
	}
	if !sixIsSet {
		return errors.New("field Six of NestedStructs_First_Args is required")
	}
	if !sevenIsSet {
		return errors.New("field Seven of NestedStructs_First_Args is required")
	}
	if !eightIsSet {
		return errors.New("field Eight of NestedStructs_First_Args is required")
	}
	if !nineIsSet {
		return errors.New("field Nine of NestedStructs_First_Args is required")
	}
	return nil
}

func (v *NestedStructs_First_Args) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [9]string
	i := 0
	fields[i] = fmt.Sprintf("One: %v", v.One)
	i++
	fields[i] = fmt.Sprintf("Two: %v", v.Two)
	i++
	fields[i] = fmt.Sprintf("Three: %v", v.Three)
	i++
	fields[i] = fmt.Sprintf("Four: %v", v.Four)
	i++
	fields[i] = fmt.Sprintf("Five: %v", v.Five)
	i++
	fields[i] = fmt.Sprintf("Six: %v", v.Six)
	i++
	fields[i] = fmt.Sprintf("Seven: %v", v.Seven)
	i++
	fields[i] = fmt.Sprintf("Eight: %v", v.Eight)
	i++
	fields[i] = fmt.Sprintf("Nine: %v", v.Nine)
	i++
	return fmt.Sprintf("NestedStructs_First_Args{%v}", strings.Join(fields[:i], ", "))
}

func (v *NestedStructs_First_Args) Equals(rhs *NestedStructs_First_Args) bool {
	if !(v.One == rhs.One) {
		return false
	}
	if !(v.Two == rhs.Two) {
		return false
	}
	if !(v.Three == rhs.Three) {
		return false
	}
	if !(v.Four == rhs.Four) {
		return false
	}
	if !(v.Five == rhs.Five) {
		return false
	}
	if !(v.Six == rhs.Six) {
		return false
	}
	if !bytes.Equal(v.Seven, rhs.Seven) {
		return false
	}
	if !(v.Eight == rhs.Eight) {
		return false
	}
	if !v.Nine.Equals(rhs.Nine) {
		return false
	}
	return true
}

func (v *NestedStructs_First_Args) MethodName() string {
	return "first"
}

func (v *NestedStructs_First_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

var NestedStructs_First_Helper = struct {
	Args           func(one bool, two int8, three int16, four int32, five int64, six float64, seven []byte, eight string, nine *RequiredStruct) *NestedStructs_First_Args
	IsException    func(error) bool
	WrapResponse   func(*RequiredStruct, error) (*NestedStructs_First_Result, error)
	UnwrapResponse func(*NestedStructs_First_Result) (*RequiredStruct, error)
}{}

func init() {
	NestedStructs_First_Helper.Args = func(one bool, two int8, three int16, four int32, five int64, six float64, seven []byte, eight string, nine *RequiredStruct) *NestedStructs_First_Args {
		return &NestedStructs_First_Args{One: one, Two: two, Three: three, Four: four, Five: five, Six: six, Seven: seven, Eight: eight, Nine: nine}
	}
	NestedStructs_First_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	NestedStructs_First_Helper.WrapResponse = func(success *RequiredStruct, err error) (*NestedStructs_First_Result, error) {
		if err == nil {
			return &NestedStructs_First_Result{Success: success}, nil
		}
		return nil, err
	}
	NestedStructs_First_Helper.UnwrapResponse = func(result *NestedStructs_First_Result) (success *RequiredStruct, err error) {
		if result.Success != nil {
			success = result.Success
			return
		}
		err = errors.New("expected a non-void result")
		return
	}
}

type NestedStructs_First_Result struct {
	Success *RequiredStruct `json:"success,omitempty"`
}

func (v *NestedStructs_First_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if i != 1 {
		return wire.Value{}, fmt.Errorf("NestedStructs_First_Result should have exactly one field: got %v fields", i)
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *NestedStructs_First_Result) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _RequiredStruct_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("NestedStructs_First_Result should have exactly one field: got %v fields", count)
	}
	return nil
}

func (v *NestedStructs_First_Result) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}
	return fmt.Sprintf("NestedStructs_First_Result{%v}", strings.Join(fields[:i], ", "))
}

func (v *NestedStructs_First_Result) Equals(rhs *NestedStructs_First_Result) bool {
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && v.Success.Equals(rhs.Success))) {
		return false
	}
	return true
}

func (v *NestedStructs_First_Result) MethodName() string {
	return "first"
}

func (v *NestedStructs_First_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
